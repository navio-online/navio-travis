#!/usr/bin/python

import subprocess
import re
import os
import sys
from navio.builder import task, nsh
import sh


@task()
def apidoc():
    """
    Generate API documentation using epydoc.
    """
    nsh.epydoc('--config', 'epydoc.config')


@task()
def validate():
    nsh.pycodestyle('navio/', '--max-line-length=110')


@task(validate)
def build():
    nsh.python('setup.py', 'bdist_wheel')
    nsh.pip.install('.')


@task(build)
def test(*args):
    """
    Run unit tests.
    """
    # pyTest = sh.Command("py.test")
    # pyTest(args, _err_to_out=True)
    subprocess.call(["py.test"] + list(args))

@task()
def check_uncommited():
    result = nsh.git('status', '--porcelain')
    if result:
        raise Exception('There are uncommited files')


@task()
def generate_rst():
    nsh.pandoc('-f', 'markdown', '-t', 'rst', '-o', 'README.rst',
              'README.md')
    nsh.pandoc('-f', 'markdown', '-t', 'rst', '-o', 'CHANGES.rst',
              'CHANGES.md')
    filenames_diff = nsh.git('diff', '--name-only')
    if 'README.rst' in filenames_diff or 'CHANGES.rst' in filenames_diff:
        nsh.git('commit', 'README.rst', 'CHANGES.rst', '-m',
               'Autogenerated from markdown files')


@task()
def update_version(ver=None):
    with open('navio/meta_travis.py', 'r') as f:
        file_str = f.read()

    if not ver:
        regexp = re.compile('__version__\s*\=\s*\"([\d\w\.\-\_]+)\"\s*')
        m = regexp.search(file_str)
        if m:
            ver = m.group(1)

    minor_ver = int(ver[ver.rfind('.')+1:])
    ver = '{}.{}'.format(ver[:ver.rfind('.')], minor_ver+1)

    file_str = re.sub(
        '__version__\s*\=\s*\"([\d\w\.\-\_]+)\"\s*',
        '__version__ = "{}"\n'.format(ver),
        file_str)

    with open('navio/meta_travis.py', 'w') as f:
        f.write(file_str)

    nsh.git('commit', 'navio/meta_travis.py', '-m',
           'Version updated to {}'.format(ver))


@task()
def create_tag():
    with open('navio/meta_travis.py', 'r') as f:
        file_str = f.read()
    regexp = re.compile('__version__\s*\=\s*\"([\d\w\.\-\_]+)\"\s*')
    m = regexp.search(file_str)
    if m:
        ver = m.group(1)
    else:
        raise "Can't find/parse current version in './navio/meta_travis.py'"

    nsh.git('tag', '-a', '-m', 'Tagging version {}'.format(ver),
           ver)


@task()
def push():
    nsh.git('push', '--verbose')
    nsh.git('push', '--tags', '--verbose')


@task()
def release(ver=None):
    check_uncommited()
    update_version(ver)
    create_tag()
    generate_rst()
    push()


@task(test)
def pypi():
    nsh.python('setup.py', 'sdist')
    args = ['upload']

    travis_pull_request = os.environ.get(
        'TRAVIS_PULL_REQUEST', False) == 'true'
    travis_tag = os.environ.get('TRAVIS_TAG', False)

    if not travis_pull_request and travis_tag:
        args.append('--repository-url')
        args.append('https://upload.pypi.org/legacy/')
    else:
        args.append('--skip-existing')
        args.append('--repository-url')
        args.append('https://test.pypi.org/legacy/')

    args.append('dist/navio-travis-*')
    nsh.twine(args)

__DEFAULT__ = test
